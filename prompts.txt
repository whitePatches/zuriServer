const prompt = `
You are a professional fashion stylist creating a single styled outfit for a fashion editorial campaign.

Your task is to generate **exactly ONE complete outfit** in a modern flatlay/editorial layout using the **uploaded ${clothingType}** as the central item.

üö´ DO NOT VIOLATE IMAGE INTEGRITY RULES:
- The uploaded garment is a real image and must be used **as-is**, with NO changes.
- Absolutely DO NOT redraw, crop, recolor, resize, regenerate, or alter the garment.
- Maintain its exact shape, pattern, style, texture, and color.

‚úÖ OUTFIT CONTENT REQUIREMENTS (ONLY ONE of each item):
- You must include **exactly one** topwear, one bottomwear, **one** pair of shoes, and **a few** accessories (like 1 bag, 1 hat, jewelry, or belt) ‚Äî depending on what's appropriate for the occasion.
- You MUST NOT include more than one of each main clothing type (no multiple tops, shoes, etc.).

üéØ Styling Focus:
- This is Look ${i + 1} out of 3 for the **${occasion}** occasion.
${previousOutfitDescriptions.length > 0 ? `
- PREVIOUS LOOKS TO AVOID REPEATING:
${previousOutfitDescriptions.map((desc, idx) => `Look ${idx + 1}: ${desc}`).join('\n')}
` : ''}
- Ensure the styling direction is new and NOT a variation of earlier looks.

üß© Clothing-Specific Rules:
${clothingType.toLowerCase().includes("top") ? `
- Add ONLY ONE bottomwear suitable for a ${occasion}.
- Add ONLY ONE pair of shoes.
` : clothingType.toLowerCase().includes("bottom") ? `
- Add ONLY ONE topwear suitable for a ${occasion}.
- Add ONLY ONE pair of shoes.
` : clothingType.toLowerCase().includes("dress") ? `
- Do NOT add any tops or bottoms.
- Add ONLY ONE pair of shoes.
` : ''}

üñºÔ∏è VISUAL OUTPUT FORMAT:
- Pinterest-style flatlay or editorial layout
- Clean, neutral background
- Soft natural lighting
- No people, models, or mannequins
- High-quality, photorealistic result
- Uploaded garment must remain in same size, placement, and scale across all outputs.

üö´ ABSOLUTE RULE: Only ONE outfit. No alternate options, no secondary pieces, no styling variations.

The final output must look like a single professional fashion flatlay styled around the uploaded ${clothingType} for the ${occasion} occasion.`;








const prompt = `
üëó ROLE: You are a professional fashion stylist creating a single, full-body styled outfit for a fashion editorial campaign using a real uploaded item.

üéØ OBJECTIVE:
Design **Look ${i + 1} of 3** for a **${occasion}** setting and ${weather}. You must build a single cohesive outfit centered around the uploaded **${clothingType}**, styled on a model for a fashion campaign.

üö´ IMAGE INTEGRITY RULES ‚Äì CRITICAL:
- The uploaded garment is a real photo and must appear **EXACTLY as provided**.
- DO NOT redraw, alter, crop, resize, rotate, or recolor it.
- DO NOT regenerate or AI-reimagine the garment in any way.
- It must remain unchanged in fabric, color, pattern, scale, and texture.

‚úÖ OUTFIT STRUCTURE:
- Include EXACTLY ONE complete outfit with:
  - ${clothingType.toLowerCase().includes("top") ? `One bottomwear` : clothingType.toLowerCase().includes("bottom") ? `One topwear` : clothingType.toLowerCase().includes("dress") ? `No additional tops or bottoms` : `One complementary garment`}
  - One pair of shoes
  - 2‚Äì3 accessories (bag, hat, jewelry, belt ‚Äì choose what fits the theme)
- NO duplicates or alternate options ‚Äì only one complete look

üé® STYLING FOCUS:
- This is Look ${i + 1} for ${occasion} ‚Äî it must be visually and stylistically different from earlier looks
${previousOutfitDescriptions.length > 0 ? `
- Previously styled looks:
${previousOutfitDescriptions.map((desc, idx) => `Look ${idx + 1}: ${desc}`).join('\n')}
` : ''}

üß© CLOTHING-SPECIFIC INSTRUCTIONS:
${clothingType.toLowerCase().includes("top") ? `
- Do NOT add another topwear
- Add one bottomwear, one pair of shoes, and accessories
` : clothingType.toLowerCase().includes("bottom") ? `
- Do NOT add another bottomwear
- Add one topwear, one pair of shoes, and accessories
` : clothingType.toLowerCase().includes("dress") ? `
- Do NOT add any top or bottom
- Only layer with outerwear like a jacket or shrug if it complements the dress
- Include one pair of shoes and accessories
` : ''}

üñºÔ∏è VISUAL OUTPUT FORMAT:
- The final outfit should be styled on a photorealistic human **model**
- Professional editorial photography look ‚Äì full-body model shot
- Clean and neutral background, natural light or soft studio lighting
- High-resolution fashion-forward appearance
- Focus on presenting the uploaded ${clothingType} as the central garment

üö´ ABSOLUTE RULE:
- Only ONE outfit
- No styling alternatives
- No secondary garments or outfit versions
- The uploaded garment must remain fully visible, untouched, and exactly as in the source image

‚ú® GOAL:
Deliver a distinct and editorial-quality outfit using the uploaded ${clothingType} styled on a model, suitable for the ${occasion} setting.
`;














import { Router } from "express";
import multer from "multer";
import { createMask } from "../utils/createMask.js";
import { ai } from "../index.js";
import { Modality } from "@google/genai";

const router = Router();
const upload = multer(); // in-memory upload



router.post("/upload", upload.single("image"), async (req, res) => {
    try {
        const clothingType = req.body.bodyPart;
        const occasion = req.body.occasion;
        const weather = req.body.weather;

        const file = req.file;
        if (!file) return res.status(400).send("No image provided");

        // Create the mask
        const masked = await createMask(file.buffer);

        // Convert the masked image to base64
        const base64Image = masked.buffer.toString("base64");

        const complementaryMetadata = await extractComplementaryClothMetaData(base64Image, occasion, clothingType, file.mimetype);

        if (!complementaryMetadata) {
            return res.status(500).send("Failed to extract complementary clothing metadata");
        }

        

        const results = [];
        const previousOutfitDescriptions = []; // Store text descriptions of previous outfits

        for (let i = 0; i < 3; i++) {
            const prompt = `
üëó ROLE: You are a professional fashion stylist creating a single, full-body styled outfit for a fashion editorial campaign using a real uploaded item.

üéØ OBJECTIVE:
Design **Look ${i + 1} of 3** for a **${occasion}** occasion during **${weather}** weather conditions. 
You must create a cohesive and seasonally appropriate outfit centered around the uploaded **${clothingType}**, styled on a model.

üå¶Ô∏è WEATHER CONTEXT ‚Äì IMPORTANT:
- The outfit must reflect practical and aesthetic considerations for **${weather}** weather.
- Consider temperature, comfort, and seasonal fabric choices:
  - For **hot weather**: use breathable, lightweight fabrics; avoid heavy layering.
  - For **cold weather**: use warm layers, outerwear, and cozy textures.
  - For **rainy or wet**: add water-resistant elements or protective accessories.
  - For **mild/spring**: use light layering and seasonal tones.
- Choose footwear and accessories that are realistic for ${weather} and match the occasion.

üö´ IMAGE INTEGRITY RULES ‚Äì CRITICAL:
- The uploaded garment is a real photo and must appear **EXACTLY as provided**.
- DO NOT redraw, alter, crop, resize, rotate, or recolor it.
- DO NOT regenerate or AI-reimagine the garment in any way.
- It must remain unchanged in fabric, color, pattern, scale, and texture.

‚úÖ OUTFIT STRUCTURE:
- Include **EXACTLY ONE** complete outfit with:
  - ${clothingType.toLowerCase().includes("top") ? `One bottomwear` : clothingType.toLowerCase().includes("bottom") ? `One topwear` : clothingType.toLowerCase().includes("dress") ? `No additional tops or bottoms` : `One complementary garment`}
  - One pair of shoes suitable for ${weather}
  - 2‚Äì3 accessories (e.g., bag, hat, jewelry, belt, scarf ‚Äì adapt to weather if needed)
- NO duplicates or alternate options ‚Äì only one complete look

üé® STYLING FOCUS:
- This is Look ${i + 1} for a **${occasion}** during **${weather}** ‚Äì it must be visually and stylistically different from earlier looks.
${previousOutfitDescriptions.length > 0 ? `
- Avoid overlapping with previously styled looks:
${previousOutfitDescriptions.map((desc, idx) => `Look ${idx + 1}: ${desc}`).join('\n')}
` : ''}

üß© CLOTHING-SPECIFIC INSTRUCTIONS:
${clothingType.toLowerCase().includes("top") ? `
- Do NOT add another topwear
- Add one seasonally-appropriate bottomwear for ${weather}
- Include one pair of shoes and accessories
` : clothingType.toLowerCase().includes("bottom") ? `
- Do NOT add another bottomwear
- Add one seasonally-appropriate topwear for ${weather}
- Include one pair of shoes and accessories
` : clothingType.toLowerCase().includes("dress") ? `
- Do NOT add any top or bottomwear
- Optionally layer with a jacket, shrug, or outerwear suitable for ${weather}
- Include one pair of shoes and accessories
` : ''}

üñºÔ∏è VISUAL OUTPUT FORMAT:
- The final outfit must be styled on a **photorealistic human model**
- Full-body professional fashion editorial look
- Clean and neutral background
- Neutral and clear background or soft lighting
- High-resolution, fashion-forward aesthetic
- Ensure the uploaded ${clothingType} is fully visible and unchanged

üö´ ABSOLUTE RULE:
- Only ONE outfit
- No secondary versions or alternates
- Uploaded garment must appear exactly as in the original photo

‚ú® GOAL:
Deliver a visually distinct, seasonally appropriate, editorial-quality outfit using the uploaded ${clothingType}, styled on a model for a ${occasion} during ${weather} conditions.
`;


            const contents = [
                { text: prompt },
                {
                    inlineData: {
                        mimeType: masked.mimeType,
                        data: base64Image,
                    },
                },
            ];

            const response = await ai.models.generateContent({
                model: "gemini-2.0-flash-preview-image-generation",
                contents,
                config: {
                    responseModalities: [Modality.TEXT, Modality.IMAGE],
                },
            });

            const parts = response?.candidates?.[0]?.content?.parts;
            const imagePart = parts?.find((p) => p?.inlineData?.data);
            const textDescription = parts[0]?.text;

            console.log(parts[0].text); // Log the text part for debugging
            // console.log(imagePart)

            previousOutfitDescriptions.push(textDescription);

            if (imagePart) {
                results.push({
                    style: `${occasion}${i + 1}`,
                    base64: imagePart.inlineData.data,
                    description: textDescription,
                });
            } else {
                results.push({
                    style: `${occasion}${i + 1}`,
                    error: "No image returned from Gemini",
                });
            }
        }



        // Final response
        return res.json({ results });

    } catch (err) {
        console.error("Error in /upload:", err);
        res.status(500).send("Masking or AI generation failed");
    }
});

export default router;






// homescreen
import axios from "axios";
import dotenv from "dotenv";

dotenv.config();

const NEWS_API_KEY = process.env.NEWS_API_KEY;
const UNSPLASH_ACCESS_KEY = "gWVXFSQjMBLXtVtVRmQVbzvBGGNSYWP6XvSWIkPEAaI";

// List of fallback keywords for Unsplash images
const fallbackKeywords = [
  "fashion", "runway", "style", "model", "clothing", "outfit", "celebrity"
];

// Random fallback Unsplash image generator
const getFallbackImage = () => {
  const keyword = fallbackKeywords[Math.floor(Math.random() * fallbackKeywords.length)];
  return `https://api.unsplash.com/search/photos?client_id=${UNSPLASH_ACCESS_KEY}&page=1&query=${encodeURIComponent(keyword)}`;
};

export const getFashionNews = async (req, res) => {
  const keyword = req.query.keyword || "celebrity fashion styles";
  const url = `https://newsapi.org/v2/everything`;

  try {
    const { data } = await axios.get(url, {
      params: {
        q: keyword,
        language: "en",
        sortBy: "publishedAt",
        pageSize: 8,
        apiKey: NEWS_API_KEY
      }
    });

    const articles = data.articles
      .map(article => ({
        title: article.title,
        description: article.description,
        url: article.url,
        image: article.urlToImage || getFallbackImage(), // Fallback logic
        source: article.source.name
      }))
    //   .slice(0, 8); // Limit to 8 after fallback included

    res.json({ articles });
  } catch (error) {
    console.error("‚ùå NewsAPI Error:", error.message);
    res.status(500).json({ message: "Internal server error" });
  }
};
